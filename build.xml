<?xml version = "1.0" encoding = "utf-8"?>
<project name = "OWL Ontology Server Project" default = "build" basedir = ".">    

  <property environment="env"/>
  <property name = "protege.home"      location="${env.PROTEGE_HOME}"/>
  <property file = "${protege.home}/build.properties"/>
  
  <property file="local.properties"/>
  <property file="version.properties"/>
  
  <property name = "bundlor.home"      location="${env.BUNDLOR_HOME}"/>
  
  <property name = "plugin"          value = "org.protege.owl.server"/>
  
  
  <property name = "src"               location = "./src/main/java"/>
  <property name = "testng.src"        location = "./src/test/java"/>
  <property name = "build"             location = "./build"/>
  <property name = "gensrc"            location = "${build}/src"/>
  <property name = "classes"           location = "${build}/classes"/>
  <property name = "server.dir"        location = "${build}/server"/>
  <property name = "server.bundles"    location = "${server.dir}/bundles"/>
  <property name = "testng.classes"    location = "${build}/testng.classes"/>
  <property name = "manifest"          location = "${build}/manifest.mf"/>
  <property name = "manifest.bundlor"  location = "./META-INF/manifest.bundlor"/>
  
  <property name = "lib.testng"        location = "./tools/testng-5.14.7.jar"/>
  <property name = "lib.antlr"         location = "./lib/antlr-3.4-complete-no-antlrv2.jar"/>

  <property name = "install.prefix"    location = "/usr/local/protege"/>
  
  <taskdef name="check.dependencies"
  	       classname="org.protege.ant.ProtegeDependencies">
    <classpath>
	  <pathelement location="${dev.tools}"/>
    </classpath>
  </taskdef>
  
  
  <target name = "init">
    <echo message="**********************************************************"/>
	   <echo message="Using Protege Home = ${protege.home}"/>
    <echo message="Using Java Version = ${ant.java.version}" />
    <echo message="**********************************************************"/>
    <tstamp>
      <format property="build.time" pattern="yyyy_MM_dd_hhmm"/>
    </tstamp>
    <property name="bundle.version" 
              value="${major.version}.${minor.version}.${micro.version}.${build.time}"/>
    <mkdir dir = "${build}"/>
   	<mkdir dir = "${testng.classes}"/>
    <mkdir dir = "${classes}"/>
    <mkdir dir = "${server.dir}"/>
    <mkdir dir="${server.bundles}"/>
    <condition property="use.bundlor">
      <and>
        <available file="${bundlor.home}"     type = "dir"/>
        <available file="${manifest.bundlor}" type = "file"/>
      </and>
    </condition>
  </target>  
  
  
  <target name="checkProtegeLibsAndReport">
    <check.dependencies>
      <property name="services" location="${protege.common}/org.apache.felix.scr.jar"/>
      <property name="owl.lib"  location="${protege.plugins}/org.semanticweb.owl.owlapi.jar"/>
    </check.dependencies>
    <path id = "project.classpath">    
      <pathelement location="${protege.osgi}"/>
      <pathelement location="${common.lib}"/>
      <pathelement location="${protege.lib}"/>
      <pathelement location="${equinox.common}"/>
      <pathelement location="${equinox.registry}"/>
      <pathelement location="${owl.lib}"/>
      <pathelement location="${lib.antlr}"/>
    </path>
  </target>
  
  <target name="generate.src" depends="init,checkProtegeLibsAndReport">
  	<delete dir="${gensrc}"/>
    <property name="parser.dir" 
              location="${gensrc}/org/protege/owl/server/policy/generated"/>
  	<mkdir dir="${parser.dir}"/>
    <java classname="org.antlr.Tool" dir="./etc" fork="true">
      <classpath>
        <pathelement location="${lib.antlr}"/>
      </classpath>
      <arg value="-o"/> <arg value="${parser.dir}"/>
      <arg value="UsersAndGroups.g"/>
    </java>
  </target>

  
  <target name = "compile" depends="init,checkProtegeLibsAndReport,generate.src">
    <javac srcdir = "${src}:${gensrc}"
           destdir = "${classes}" 
           debug="on"
           includeAntRuntime="false">
      <classpath refid = "project.classpath"/>  
    </javac>
    <rmic base="${classes}"
          classname="org.protege.owl.server.connect.rmi.RemoteServerImpl">
      <classpath refid = "project.classpath"/>  
    </rmic>
  	<copy todir="${classes}/lib">
      <fileset dir="./lib" 
               includes="**/*.jar"/>
  	</copy>

  </target>
  
  <target name = "testng.compile" depends="init,checkProtegeLibsAndReport">
    <javac srcdir = "${testng.src}"
           destdir = "${testng.classes}" 
           debug="on"
           includeAntRuntime="false">
      <classpath>
        <pathelement path="${classes}"/>
        <pathelement path="${lib.testng}"/>
        <pathelement path="${protege.osgi}"/>
        <pathelement path="${protege.launcher}"/>
        <path refid="project.classpath"/>
      </classpath>
    </javac>
  </target>
  
  
  <target name="use.existing.manifest" depends="init" unless="use.bundlor">
    <copy tofile="${manifest}" 
          file="META-INF/MANIFEST.MF" overwrite="true"/>
    <manifest file="${manifest}" 
              mode = "update">
      <attribute name="Built-By" value = "${user.name}"/>
      <attribute name="Bundle-Version" value="${bundle.version}"/>
    </manifest>
  </target>
  
  <target name="bundlor.manifest" depends="compile" if="use.bundlor">
    <java classname="org.eclipse.virgo.bundlor.commandline.Bundlor"
          failonerror="true" fork="true">
      <classpath>
        <fileset dir="${bundlor.home}/plugins" includes="*.jar"/>
      </classpath>
      <jvmarg value="-Dbundle.version=${bundle.version}"/>
      <jvmarg value="-Duser.name=${user.name}"/>
      <jvmarg value="-Dplugin=${plugin}"/>
      <arg value = "-i"/> <arg value="${classes}"/>
      <arg value = "-m"/> <arg value="./META-INF/manifest.bundlor"/>
      <arg value = "-o"/> <arg value = "."/>
    </java>
    <copy tofile="${manifest}" 
          file="META-INF/MANIFEST.MF" overwrite="true"/>
  </target>


  <target name="setup.server.framework">
    <mkdir dir="${server.dir}/configuration"/>
    <mkdir dir="${server.dir}/lib"/>
    <mkdir dir="${server.dir}/plugins"/>
    <mkdir dir="${server.dir}/root"/>
    <copy file="./logging.properties" todir="${server.dir}"/>
    <copy file="${protege.osgi}" todir="${server.dir}/lib"/>
    <copy file="${protege.launcher}" todir="${server.dir}/lib"/>
    <copy file="${protege.common}/org.apache.felix.configadmin.jar" todir="${server.bundles}"/>
    <copy file="${protege.common}/org.apache.felix.scr.jar" todir="${server.bundles}"/>
    <copy file="${protege.plugins}/org.semanticweb.owl.owlapi.jar" todir="${server.bundles}"/>
    <copy todir="${server.dir}">
      <fileset dir="./etc/server.template"/>
    </copy>
    <copy todir="${server.dir}/bin" file="./tools/commons-cli-1.2.jar"/>
  </target>

  <target name="copy.resources">
      <copy todir="${classes}/OSGI-INF">
        <fileset dir="OSGI-INF" includes="*.xml"/>
      </copy>
      <copy todir="${classes}">
        <fileset dir="src/main/resources" includes="*.owl"/>
      </copy>
  </target>
  
  
  <target name = "jar" depends = "compile, use.existing.manifest, bundlor.manifest,copy.resources">
    <jar jarfile = "${server.bundles}/${plugin}.jar"
         basedir = "${classes}" 
         manifest = "${manifest}"/>
  </target>
  
  <target name = "build" depends = "jar,setup.server.framework">
    <!-- flush cache -->
    <delete dir = "${protege.home}/configuration/org.eclipse.core.runtime"/>
    <delete dir = "${protege.home}/configuration/org.eclipse.osgi"/>
    <copy file="${server.bundles}/${plugin}.jar" 
          todir = "${protege.plugins}"
          overwrite = "true"/>
    <copy file="./src/main/resources/server-config.xml"
          todir="${protege.home}"/>
    <copy file="./src/main/resources/run-server.sh"
          todir="${protege.home}"/>
  </target>

  <target name = "install" depends="build">
    <copy todir="${install.prefix}/server">
      <fileset dir="${server.dir}" excludes="metaproject.owl"/>
    </copy>
    <copy file="./etc/metaproject-data.owl"
          tofile="${install.prefix}/server/metaproject.owl"/>
    <copy file="./etc/init.d/logging-unix.properties"
          todir="${install.prefix}/server"/>
    <mkdir dir="${install.prefix}/bin"/>
    <mkdir dir="${install.prefix}/data"/>
  </target>


  <target name = "clean">
    <delete dir="${build}"/>
  </target>

  <!-- Testing -->

  <target name="unit.test" depends="build,testng.compile">
    <mkdir dir="${build}/test-output"/>
    <java classname="org.testng.TestNG"
          fork = "true">
      <classpath>
        <pathelement path="${classes}"/>
        <pathelement path="${testng.classes}"/>
        <pathelement path="${lib.testng}"/>
        <pathelement path="${protege.osgi}"/>
        <pathelement path="${protege.launcher}"/>
        <path refid="project.classpath"/>
      </classpath>
      <jvmarg value = "-Xmx1G"/>
      <jvmarg value="-Djava.util.logging.config.file=./logging-test.properties"/>
      <jvmarg value="-Djava.util.logging.SimpleFormatter.format=%4$s: %5$s%n"/>
      <arg    value="src/test/resources/unit-tests.xml"/>
      <arg    value="-d"/>
      <arg    value="${build}/test-output"/>
    </java>
  </target>
  
  <target name="debug.unit.test" depends="build, testng.compile">
    <mkdir dir="${build}/test-output"/>
    <java classname="org.testng.TestNG"
          fork = "true">
      <classpath>
        <pathelement path="${classes}"/>
        <pathelement path="${testng.classes}"/>
        <pathelement path="${lib.testng}"/>
        <pathelement path="${protege.osgi}"/>
        <pathelement path="${protege.launcher}"/>
        <path refid="project.classpath"/>
      </classpath>
      <jvmarg value = "-Xmx1G"/>
      <jvmarg value="-Djava.util.logging.config.file=./logging.properties"/>
      <jvmarg value="-Djava.util.logging.SimpleFormatter.format=%4$s: %5$s%n"/>
      <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8100,server=y,suspend=y"/>
      <arg    value="src/test/resources/debug-unit-tests.xml"/>
      <arg    value="-d"/>
      <arg    value="${build}/test-output"/>
    </java>
  </target>
  
  <!-- Run -->
	
    <target name = "run" depends="init">
        <java fork = "true" dir = "${server.dir}" 
              classname = "org.protege.osgi.framework.Launcher">
            <jvmarg value = "-Xmx3000M"/>
            <jvmarg value="-Djava.util.logging.config.file=logging.properties"/>
        	<jvmarg value="-DentityExpansionLimit=100000000"/>
        	<jvmarg value="-Dfile.encoding=UTF-8"/>
        	<jvmarg value="-Dorg.protege.owl.server.configuration=metaproject.owl"/>
            <classpath>
              <pathelement path="${protege.osgi}"/>
              <pathelement path="${protege.launcher}"/>
            </classpath>
        </java>
    </target>

    <target name = "debug" depends="init">
        <java fork = "true" dir = "${server.dir}" 
              classname = "org.protege.osgi.framework.Launcher">
            <jvmarg value = "-Xmx3000M"/>
            <jvmarg value="-Djava.util.logging.config.file=./logging.properties"/>
        	<jvmarg value="-DentityExpansionLimit=100000000"/>
        	<jvmarg value="-Dfile.encoding=UTF-8"/>
        	<jvmarg value="-Dorg.protege.owl.server.configuration=metaproject.owl"/>
            <jvmarg value="-agentlib:jdwp=transport=dt_socket,address=8100,server=y,suspend=y"/>
            <classpath>
              <pathelement path="${protege.osgi}"/>
              <pathelement path="${protege.launcher}"/>
            </classpath>
        </java>
    </target>

    <target name = "profile" depends="init">
        <java fork = "true" dir = "${server.dir}" 
              classname = "org.protege.osgi.framework.Launcher">
            <jvmarg value = "-Xmx3000M"/>
            <jvmarg value="-Djava.util.logging.config.file=./logging.properties"/>
        	<jvmarg value="-DentityExpansionLimit=100000000"/>
        	<jvmarg value="-Dfile.encoding=UTF-8"/>
        	<jvmarg value="-Dorg.protege.owl.server.configuration=metaproject.owl"/>
            <jvmarg value="-agentpath:/home/redmond/work/packages/yjp-9.5.6/bin/linux-x86-64/libyjpagent.so"/>
            <classpath>
              <pathelement path="${protege.osgi}"/>
              <pathelement path="${protege.launcher}"/>
            </classpath>
        </java>
    </target>
	

</project>
