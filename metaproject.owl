Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(protege:=<http://protege.stanford.edu/plugins/owl/protege#>)
Prefix(:=<http://smi-protege.stanford.edu/ontologies/metaproject.owl#>)
Prefix(xsp:=<http://www.owl-ontologies.com/2005/08/07/xsp.owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://smi-protege.stanford.edu/ontologies/metaproject.owl>
Annotation(rdfs:comment "This ontology contains all the pieces of the configuration of a server, ranging from the server implementation as a collection of components to the user database and the policy being maintained by the server.  Where possible, passwords are md5 encrypted with a salt but this file may contain sensitive information including the database connection parameters.

When the running Protege server sees an import of this ontology, the Protege server will resolve this import locally without going to the network."@en)

Declaration(Class(:ConflictManager))
SubClassOf(:ConflictManager :ServerComponent)
Declaration(Class(:DatabaseServerBackend))
SubClassOf(:DatabaseServerBackend :ServerBackend)
SubClassOf(:DatabaseServerBackend DataSomeValuesFrom(:password xsd:string))
SubClassOf(:DatabaseServerBackend DataSomeValuesFrom(:url xsd:string))
SubClassOf(:DatabaseServerBackend DataSomeValuesFrom(:username xsd:string))
Declaration(Class(:Group))
AnnotationAssertion(rdfs:label :Group "Group"^^xsd:string)
AnnotationAssertion(rdfs:comment :Group "Groups of users for the convenience of the policy administrator.  If a group is called World then it will implicitly be assumed that it  includes every user."^^xsd:string)
SubClassOf(:Group :PolicyControlledObject)
Declaration(Class(:GroupAppliedOperation))
AnnotationAssertion(rdfs:label :GroupAppliedOperation "GroupAppliedOperation"^^xsd:string)
SubClassOf(:GroupAppliedOperation :Operation)
Declaration(Class(:GroupOperation))
AnnotationAssertion(rdfs:label :GroupOperation "GroupOperation"^^xsd:string)
Declaration(Class(:Operation))
AnnotationAssertion(rdfs:label :Operation "Operation"^^xsd:string)
AnnotationAssertion(rdfs:comment :Operation "An operation that occurs during the lifecycle of a project that should be subject to access control.  For example, the READ operation implies the ability to view a project and the EDIT operation implies the ability to read and modify a project."^^xsd:string)
Declaration(Class(:PolicyControlledObject))
AnnotationAssertion(rdfs:label :PolicyControlledObject "PolicyControlledObject"^^xsd:string)
Declaration(Class(:Project))
AnnotationAssertion(rdfs:comment :Project "This class represents the class of all projects.  When the server reads this ontology, it examines each instance of this class and attempts to load the project associated with that instance.  The only two fields that the server examines are the location, which represents the location of the project file in the file system (relative paths  are allowed) and the name, which represents the string thhat is shown to the user so the user  can choose a project to edit."^^xsd:string)
AnnotationAssertion(rdfs:label :Project "Project"^^xsd:string)
SubClassOf(:Project :PolicyControlledObject)
SubClassOf(:Project DataSomeValuesFrom(:location xsd:string))
Declaration(Class(:ProjectAppliedOperation))
AnnotationAssertion(rdfs:label :ProjectAppliedOperation "ProjectAppliedOperation"^^xsd:string)
SubClassOf(:ProjectAppliedOperation :Operation)
Declaration(Class(:PropertyValue))
AnnotationAssertion(rdfs:label :PropertyValue "PropertyValue"^^xsd:string)
EquivalentClasses(:PropertyValue ObjectIntersectionOf(DataSomeValuesFrom(:propertyValue xsd:string) DataSomeValuesFrom(:propertyName xsd:string)))
Declaration(Class(:RestfulServicesConnectionManager))
SubClassOf(:RestfulServicesConnectionManager :ServerConnectionManager)
SubClassOf(:RestfulServicesConnectionManager DataSomeValuesFrom(:hostPort xsd:string))
Declaration(Class(:Server))
AnnotationAssertion(rdfs:label :Server "Server"^^xsd:string)
EquivalentClasses(:Server ObjectIntersectionOf(:PolicyControlledObject ObjectExactCardinality(1 :conflictManagerComponent :ConflictManager) ObjectExactCardinality(1 :connectionComponent :ServerConnectionManager) ObjectExactCardinality(1 :serverBakendComponent :ServerBackend)))
SubClassOf(:Server DataSomeValuesFrom(:hostName xsd:string))
Declaration(Class(:ServerAppliedOperation))
AnnotationAssertion(rdfs:label :ServerAppliedOperation "ServerAppliedOperation"^^xsd:string)
SubClassOf(:ServerAppliedOperation :Operation)
Declaration(Class(:ServerBackend))
SubClassOf(:ServerBackend :ServerComponent)
Declaration(Class(:ServerComponent))
SubClassOf(:ServerComponent owl:Thing)
DisjointUnion(:ServerComponent :ConflictManager :ServerBackend :ServerConnectionManager)
Declaration(Class(:ServerConnectionManager))
SubClassOf(:ServerConnectionManager :ServerComponent)
Declaration(Class(:StrictConflictManager))
SubClassOf(:StrictConflictManager :ConflictManager)
Declaration(Class(:User))
AnnotationAssertion(rdfs:label :User "User"^^xsd:string)
SubClassOf(:User DataSomeValuesFrom(:password xsd:string))
SubClassOf(:User DataSomeValuesFrom(:username xsd:string))
Declaration(ObjectProperty(:allowedGroup))
AnnotationAssertion(rdfs:label :allowedGroup "allowedGroup"^^xsd:string)
FunctionalObjectProperty(:allowedGroup)
ObjectPropertyDomain(:allowedGroup :GroupOperation)
ObjectPropertyRange(:allowedGroup :Group)
Declaration(ObjectProperty(:allowedGroupOperation))
AnnotationAssertion(rdfs:label :allowedGroupOperation "allowedGroupOperation"^^xsd:string)
ObjectPropertyDomain(:allowedGroupOperation :PolicyControlledObject)
ObjectPropertyRange(:allowedGroupOperation :GroupOperation)
Declaration(ObjectProperty(:allowedOperation))
AnnotationAssertion(rdfs:label :allowedOperation "allowedOperation"^^xsd:string)
ObjectPropertyDomain(:allowedOperation :GroupOperation)
ObjectPropertyRange(:allowedOperation :Operation)
Declaration(ObjectProperty(:annotationProject))
AnnotationAssertion(rdfs:label :annotationProject "annotationProject"^^xsd:string)
FunctionalObjectProperty(:annotationProject)
ObjectPropertyDomain(:annotationProject :Project)
ObjectPropertyRange(:annotationProject :Project)
Declaration(ObjectProperty(:conflictManagerComponent))
SubObjectPropertyOf(:conflictManagerComponent :serverComponent)
ObjectPropertyRange(:conflictManagerComponent :ConflictManager)
Declaration(ObjectProperty(:connectionComponent))
SubObjectPropertyOf(:connectionComponent :serverComponent)
ObjectPropertyRange(:connectionComponent :ServerConnectionManager)
Declaration(ObjectProperty(:group))
AnnotationAssertion(rdfs:label :group "group"^^xsd:string)
InverseObjectProperties(:member :group)
ObjectPropertyDomain(:group :User)
Declaration(ObjectProperty(:member))
AnnotationAssertion(rdfs:label :member "member"^^xsd:string)
InverseObjectProperties(:member :group)
ObjectPropertyDomain(:member :Group)
Declaration(ObjectProperty(:owner))
AnnotationAssertion(rdfs:label :owner "owner"^^xsd:string)
FunctionalObjectProperty(:owner)
ObjectPropertyDomain(:owner :Project)
ObjectPropertyRange(:owner :User)
Declaration(ObjectProperty(:properties))
AnnotationAssertion(rdfs:label :properties "properties"^^xsd:string)
ObjectPropertyRange(:properties :PropertyValue)
Declaration(ObjectProperty(:serverBakendComponent))
SubObjectPropertyOf(:serverBakendComponent :serverComponent)
ObjectPropertyRange(:serverBakendComponent :ServerBackend)
Declaration(ObjectProperty(:serverComponent))
ObjectPropertyDomain(:serverComponent :Server)
ObjectPropertyRange(:serverComponent :ServerComponent)
Declaration(DataProperty(:description))
AnnotationAssertion(rdfs:label :description "description"^^xsd:string)
FunctionalDataProperty(:description)
DataPropertyRange(:description xsd:string)
Declaration(DataProperty(:email))
AnnotationAssertion(rdfs:label :email "email"^^xsd:string)
FunctionalDataProperty(:email)
DataPropertyDomain(:email :User)
DataPropertyRange(:email xsd:string)
Declaration(DataProperty(:hostName))
AnnotationAssertion(rdfs:label :hostName "hostName"^^xsd:string)
FunctionalDataProperty(:hostName)
DataPropertyRange(:hostName xsd:string)
Declaration(DataProperty(:hostPort))
SubDataPropertyOf(:hostPort :location)
Declaration(DataProperty(:lastAccess))
AnnotationAssertion(rdfs:label :lastAccess "lastAccess"^^xsd:string)
FunctionalDataProperty(:lastAccess)
DataPropertyDomain(:lastAccess :User)
DataPropertyRange(:lastAccess xsd:string)
Declaration(DataProperty(:lastLogin))
AnnotationAssertion(rdfs:label :lastLogin "lastLogin"^^xsd:string)
FunctionalDataProperty(:lastLogin)
DataPropertyDomain(:lastLogin :User)
DataPropertyRange(:lastLogin xsd:string)
Declaration(DataProperty(:location))
AnnotationAssertion(rdfs:label :location "location"^^xsd:string)
FunctionalDataProperty(:location)
DataPropertyRange(:location xsd:string)
Declaration(DataProperty(:name))
DataPropertyRange(:name xsd:string)
Declaration(DataProperty(:password))
AnnotationAssertion(rdfs:label :password "password"^^xsd:string)
FunctionalDataProperty(:password)
DataPropertyRange(:password xsd:string)
Declaration(DataProperty(:propertyName))
AnnotationAssertion(rdfs:label :propertyName "propertyName"^^xsd:string)
FunctionalDataProperty(:propertyName)
DataPropertyDomain(:propertyName :PropertyValue)
DataPropertyRange(:propertyName xsd:string)
Declaration(DataProperty(:propertyValue))
AnnotationAssertion(rdfs:label :propertyValue "propertyValue"^^xsd:string)
FunctionalDataProperty(:propertyValue)
DataPropertyDomain(:propertyValue :PropertyValue)
DataPropertyRange(:propertyValue xsd:string)
Declaration(DataProperty(:salt))
AnnotationAssertion(rdfs:label :salt "salt"^^xsd:string)
FunctionalDataProperty(:salt)
DataPropertyDomain(:salt :User)
DataPropertyRange(:salt xsd:string)
Declaration(DataProperty(:url))
SubDataPropertyOf(:url :location)
Declaration(DataProperty(:username))
SubDataPropertyOf(:username :name)
DisjointClasses(:GroupAppliedOperation :ProjectAppliedOperation :ServerAppliedOperation)
DisjointClasses(:Group :Project :Server)
DisjointClasses(:GroupOperation :Operation :PolicyControlledObject :PropertyValue :ServerComponent :User)
)
